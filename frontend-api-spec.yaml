weyoto_gitgpt_frontend_api:
  description: >
    Frontend API flow for Weyoto GitGPT onboarding — passwordless email login, verification, and GitHub token setup.

  base_url: "https://gitgpt-staging.weyoto.com/"

  endpoints (5):

    - name: Request Email Verification Code
      method: POST
      path: /auth/request-code
      headers:
        Content-Type: application/json
      body:
        email: "user@example.com"
      success_response:
        success: true
        message: "Verification code sent to your email."
      notes: >
        Sends a 6-digit verification code to the user's email.
        If a code was recently sent (within 60 seconds), the server will return an error response with a 429 status.
        This helps prevent abuse and ensures fair use of the system.
        No password is required — only email verification.

    - name: Verify Email Code
      method: POST
      path: /auth/verify-code
      headers:
        Content-Type: application/json
      body:
        email: "user@example.com"
        code: "123456"
      success_response:
        success: true
      notes: >
        Verifies the code and creates a permanent API Key in the backend database which is returned in a response.
        The API Key will only be revealed to the user after they complete GitHub PAT setup.
        Save authentication context after this step to proceed to GitHub connection.

    - name: Set GitHub Personal Access Token
      method: POST
      path: /github/set-pat
      headers:
        Content-Type: application/json
        x-api-key: "your-user-api-key"
      body:
        github_pat: "your-github-personal-access-token"
      success_response:
        message: "GitHub token saved successfully."
      error_response:
        400:
          error: "Missing GitHub token."
        401:
          error: "Invalid or expired GitHub token. Ensure you're inputting a valid fine-grained PAT"
      notes: >
        Stores user's GitHub PAT securely to allow GitGPT to access repositories in real-time.
        Validates the GitHub token before saving.
        If the token is invalid or expired, the API will return a 401 error and will not save it.
        Make sure the PAT is fine-grained, not classic, and has access to the repos you intend to use.

    - name: Get API Key (Authenticated)
      method: GET
      path: /auth/view-api-key
      headers:
        Content-Type: application/json
        x-api-key: "your-user-api-key"
      success_response:
        email: "user@example.com"
        api_key: "e4f7c1a2b8309cf458f47cddf8495d6d"
      notes: >
        Returns the currently authenticated user's API key and email.
        Requires a valid x-api-key header from a previously verified login.

    - name: Regenerate API Key (Email Code Required)
      method: POST
      path: /auth/regenerate-api-key
      headers:
        Content-Type: application/json
        x-api-key: "your-user-api-key"
      body:
        code: "123456"
      success_response:
        message: "API key regenerated successfully."
        api_key: "new-api-key-hex-string"
      notes: >
        Requires a valid 6-digit verification code that was emailed to the user, triggered by the /request-code endpoint
        This code must be submitted in the request body and must not be expired.
        After regenerating the API key, the previous key becomes invalid.
    - name: Start GitHub OAuth Flow
      method: GET
      path: /auth/github/oauth/start
      headers: { }
      success_response:
        redirects_to: "https://github.com/login/oauth/authorize"
      notes: >
        Initiates GitHub OAuth by redirecting the user to GitHub's authorization screen.
        No headers or body required. This should be triggered from a browser.
        GitHub will redirect to your configured callback URL after approval.

    - name: GitHub OAuth Callback (Token Retrieval Only)
      method: GET
      path: /auth/github/oauth/callback
      headers: { }
      success_response:
        access_token: "gho_abc123xyz"
        message: "Token retrieved. Now send to /auth/github/oauth/save-token with your x-api-key"
      notes: >
        This endpoint is automatically triggered by GitHub after user authorization.
        It exchanges the OAuth code for an access token.
        Does not save the token to any user — frontend must pass this token to /save-token with x-api-key.

    - name: Save GitHub OAuth Token (Authenticated)
      method: POST
      path: /auth/github/oauth/save-token
      headers:
        Content-Type: application/json
        x-api-key: "your-user-api-key"
      body:
        access_token: "gho_abc123xyz"
      success_response:
        message: "GitHub token saved successfully for your account."
      error_response:
        400:
          error: "Missing access token."
        403:
          error: "Invalid or expired API key."
      notes: >
        Saves the GitHub OAuth token to the currently authenticated user.
        Must be called with a valid x-api-key after the token is received via /auth/github/oauth/callback.
        This step completes the GitHub account linking process.


  usage_flow:
    - Step 1: User enters email and requests code (POST /auth/request_code)
    - Step 2: User enters 6-digit code to verify (POST /auth/verify_code)
    - Step 3: User submits GitHub PAT (POST /auth/set_github_token)
    - Step 4: API Key is revealed (or available via future /user/api_key endpoint)
    - Step 5: User is now fully authenticated and ready to use GitHub queries.

  developer_tips:
    - Always include x-api-key header after verification.
    - Use JSON POSTs for all requests.
    - Handle errors gracefully and prompt users to retry if needed.
    - Store API Key securely (e.g., localStorage/sessionStorage, encrypted if needed).
